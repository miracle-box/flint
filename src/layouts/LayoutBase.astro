---
import { getLocaleByPath } from 'astro:i18n';
import { getLocaleByCode, useTranslation } from '~/lib/i18n/utils';
import { Config } from '~/config';
import CommonHead from '~/components/common/CommonHead.astro';
import type { LayoutBaseProps } from '~/lib/types';

type Props = LayoutBaseProps;

const locale = getLocaleByCode(Astro.currentLocale);
const t = await useTranslation(locale);

const langCode = getLocaleByPath(locale);
const { title, description } = Astro.props;

const lightTheme = Astro.props.lightTheme || 'light';
const darkTheme = Astro.props.darkTheme || 'dark';
---

<!doctype html>
<script>
	// Set color scheme
	const root = document.documentElement;

	const setColorScheme = () => {
		const lightTheme = root.getAttribute('data-theme-light') || 'light';
		const darkTheme = root.getAttribute('data-theme-dark') || 'dark';

		const colorScheme =
			(root.getAttribute('data-color-scheme') || 'system') === 'system'
				? window.matchMedia('(prefers-color-scheme: dark)').matches
					? 'dark'
					: 'light'
				: root.getAttribute('data-color-scheme');

		root.setAttribute(
			'data-theme',
			colorScheme === 'light' ? lightTheme : darkTheme,
		);
	};

	const observer = new MutationObserver((mutations) => {
		mutations.forEach((mutation) => {
			if (
				mutation.type === 'attributes' &&
				mutation.attributeName === 'data-color-scheme'
			) {
				setColorScheme();
			}
		});
	});

	observer.observe(root, {
		attributes: true,
		attributeFilter: ['data-color-scheme'],
	});

	// Set the initial theme
	setColorScheme();
</script>

<html lang={langCode} data-theme-light={lightTheme} data-theme-dark={darkTheme}>
	<CommonHead
		title={`${title}${Config.site.titleSeparator}${t('site.name')}`}
		description={description}
	/>

	<body class="flex min-h-screen flex-col">
		<slot />
	</body>
</html>
